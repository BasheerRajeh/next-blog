// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    hashedPassword String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    posts          Post[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    likes          Like[]
    bio            String?
}

enum Visibility {
    PUBLIC
    PRIVATE
}

model Post {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    authorId    String   @db.ObjectId
    title       String
    description String?
    content     String?
    published   Boolean  @default(false)
    createAt    DateTime @default(now())
    updatedAt   DateTime @updatedAt

    author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    visibility Visibility @default(PUBLIC)
    userId     String?    @db.ObjectId
    likes      Like[]
}

model Like {
    id     String @id @default(auto()) @map("_id") @db.ObjectId
    postId String @db.ObjectId
    userId String @db.ObjectId
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
    user   User   @relation(fields: [postId], references: [id], onDelete: Cascade)
}
